#+STARTIP: overview
* interface
#+BEGIN_SRC emacs-lisp
  ;;;; interface
  (setq inhibit-startup-message t)
  (global-linum-mode t)
  (tool-bar-mode -1)
  (fset 'yes-or-no-p 'y-or-n-p)
  (global-set-key (kbd "<f5>") 'revert-buffer)

  (setq delete-old-versions -1 )		; delete excess backup versions silently
  (setq version-control t )		; use version control
  (setq vc-make-backup-files t )		; make backups file even when in version controlled dir
  (setq backup-directory-alist `(("." . "~/.emacs.d/backups")) ) ; which directory to put backups file
  (setq vc-follow-symlinks t )				       ; don't ask for confirmation when opening symlinked file
  (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)) ) ;transform backups file name
  (setq ring-bell-function 'ignore )	; silent bell when you make a mistake
  (setq coding-system-for-read 'utf-8 )	; use utf-8 by default
  (setq coding-system-for-write 'utf-8 )
  (setq sentence-end-double-space nil)	; sentence SHOULD end with only a point.
  (setq default-fill-column 80)		; toggle wrapping text at the 80th character


#+END_SRC

#+RESULTS:
: Welcome in Emacs

* org
#+BEGIN_SRC emacs-lisp
  ;;;; org 
  (use-package org
    :ensure org-plus-contrib
    )
  ;;; org bullets
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
    )

  ;;; org capture settings
  (custom-set-variables
   '(org-directory "~/Dropbox/org")
   '(org-default-notes-file (concat org-directory "/notes.org"))
   '(org-export-html-postamble nil)
   '(org-hide-leading-stars t)
   '(org-startup-folded (quote overview))
   '(org-startup-indented t)
   )

  (setq org-file-apps
        (append '(
                  ("\\.pdf\\'" . "evince %s")
                  ) org-file-apps ))

  (use-package org-ac
    :ensure t
    :init (progn
            (require 'org-ac)
            (org-ac/config-default)
            ))

  (setq org-agenda-files (list
                          "~/Dropbox/org/gcal.org"
                          "~/Dropbox/org/i.org"
                          "~/Dropbox/org/schedule.org"
                          ))


  (setq org-capture-templates
        '(("a" "Appointment" entry (file  "~/Dropbox/org/gcal.org")
           "* TODO %?\n:PROPERTIES:\n\n:END:\nDEADLINE: %^T \n %i\n")
          ("n" "Note" entry (file+headline "~/Dropbox/org/notes.org" "Notes")
           "* Note %?\n%T")
          ("l" "Link" entry (file+headline "~/Dropbox/org/links.org" "Links")
           "* %? %^L %^g \n%T" :prepend t)
          ("b" "Blog idea" entry (file+headline "~/Dropbox/org/i.org" "Blog Topics:")
           "* %?\n%T" :prepend t)
          ("t" "To Do Item" entry (file+headline "~/Dropbox/org/i.org" "To Do Items")
           "* %?\n%T" :prepend t)
          ("j" "Journal" entry (file+datetree "~/Dropbox/journal.org")
           "* %?\nEntered on %U\n  %i\n  %a")
          ("s" "Screencast" entry (file "~/Dropbox/org/screencastnotes.org")
           "* %?\n%i\n")))


  (defadvice org-capture-finalize 
      (after delete-capture-frame activate)  
    "Advise capture-finalize to close the frame"  
    (if (equal "capture" (frame-parameter nil 'name))  
        (delete-frame)))

  (defadvice org-capture-destroy 
      (after delete-capture-frame activate)  
    "Advise capture-destroy to close the frame"  
    (if (equal "capture" (frame-parameter nil 'name))  
        (delete-frame)))  

  (use-package noflet
    :ensure t )
  (defun make-capture-frame ()
    "Create a new frame and run org-capture."
    (interactive)
    (make-frame '((name . "capture")))
    (select-frame-by-name "capture")
    (delete-other-windows)
    (noflet ((switch-to-buffer-other-window (buf) (switch-to-buffer buf)))
      (org-capture)))


  (setq package-check-signature nil)


  (use-package org-gcal
    :ensure t
    :config
    (setq org-gcal-client-id "32309848563-d4deg8d596atsmr8l019s6g1kabpko2b.apps.googleusercontent.com"
          org-gcal-client-secret "n5ky0Yh-1xOj9hfFN3hcChbv"
          org-gcal-file-alist '(("marfos19@gmail.com" .  "~/Dropbox/org/gcal.org"))))


  (add-hook 'org-agenda-mode-hook (lambda () (org-gcal-sync) ))
  (add-hook 'org-capture-after-finalize-hook (lambda () (org-gcal-sync) ))


  (use-package calfw
    :ensure ;TODO: 
    :config
    (require 'calfw) 
    (require 'calfw-org)
    (setq cfw:org-overwrite-default-keybinding t)
    (require 'calfw-ical)

    (defun mycalendar ()
      (interactive)
      (cfw:open-calendar-buffer
       :contents-sources
       (list
        ;; (cfw:org-create-source "Green")  ; orgmode source
        (cfw:ical-create-source "gcal" "https://somecalnedaraddress" "IndianRed") ; devorah calender
        (cfw:ical-create-source "gcal" "https://anothercalendaraddress" "IndianRed") ; google calendar ICS
        ))) 
    (setq cfw:org-overwrite-default-keybinding t))

  (use-package calfw-gcal
    :ensure t
    :config
    (require 'calfw-gcal))
#+END_SRC

#+RESULTS:
: t

* general & keybinds
#+BEGIN_SRC emacs-lisp
  ;;;; general lets you easily add keybinds

  ;;; This is where i define my keybinds
  (use-package general
    :ensure t
    :config (progn
	      (general-define-key
	       "C-'" 'avy-goto-word-1
	       "C-s" 'swiper             ; search for string in current buffer
	       "M-x" 'counsel-M-x        ; replace default M-x with ivy backend
	       )
	      (general-define-key
	       :prefix "C-c"
	       ;; bind to simple key press
	       "b"   'ivy-switch-buffer  ; change buffer, chose using ivy
	       "/"   'counsel-git-grep   ; find string in git project
	       ;; bind to double key press
	       "f"   '(:ignore t :which-key "files")
	       "ff"  'counsel-find-file
	       "fr"  'counsel-recentf
	       "p"   '(:ignore t :which-key "project")
	       "pf"  '(counsel-git :which-key "find file in git dir")
	       ;; org mode related
	       "c"   'org-capture
	       "a"   'org-agenda
	       )
	      (general-define-key
	       :states '(normal visual insert emacs)
	       :prefix "SPC"
	       :non-normal-prefix "C-SPC"

	       ;; simple command
	       "'"   '(iterm-focus :which-key "iterm")
	       "?"   '(iterm-goto-filedir-or-home :which-key "iterm - goto dir")
	       "/"   'counsel-ag
	       "TAB" '(switch-to-other-buffer :which-key "prev buffer")
	       "SPC" '(avy-goto-word-or-subword-1  :which-key "go to char")

	       ;; Applications
	       "a" '(:ignore t :which-key "Applications")
	       "ar" 'ranger
	       "ad" 'dired)
	      ))

#+END_SRC

#+RESULTS:
: t
* evil
#+BEGIN_SRC emacs-lisp
     ;;;; evil


;; using evil-commentary instead 
     ;;; evil-nerd-commenter
;; (use-package evil-nerd-commenter
;;   :ensure t
;;   :config (progn
;; 	    ;; (evilnc-default-hotkeys)
;; 	    )
;;   )

;; using general instead of evil-leader
     ;;; evil-leader
;; (use-package evil-leader
;;   :ensure t
;;   :config (progn
;; 	    (global-evil-leader-mode)
;; 	    (evil-leader/set-leader "<SPC>")
;; 	    (evil-leader/set-key
;; 		   ;;; evil nerd commenter keys
;; 	      ;; "ci" 'evilnc-comment-or-uncomment-lines
;; 	      ;; "cl" 'evilnc-quick-comment-or-uncomment-to-the-line
;; 	      ;; "ll" 'evilnc-quick-comment-or-uncomment-to-the-line
;; 	      ;; "cc" 'evilnc-copy-and-comment-lines
;; 	      ;; "cp" 'evilnc-comment-or-uncomment-paragraphs
;; 	      ;; "cr" 'comment-or-uncomment-region
;; 	      ;; "cv" 'evilnc-toggle-invert-comment-line-by-line
;; 	      ;; "."  'evilnc-copy-and-comment-operator
;; 	      ;; "\\" 'evilnc-comment-operator ; if you prefer backslash key
;; 		 ;;; splitting windows keys
;; 	      "vs" 'split-window-right
;; 	      "hs" 'split-window-below
;; 	      )
;; 	    )  
;;   )

     ;;; evil commentary
(use-package evil-commentary
  :ensure t
  :config (progn
	    (evil-commentary-mode)

	    )
  )

  ;;; installing evil
(use-package evil
  :ensure t
  :init (progn
	  )
  :config (progn
	    (evil-mode 1)
	    )
  )
     ;;; evil-surround
;; deletes, replace or adds surrounding characters
(use-package evil-surround
  :ensure t
  :config
  (global-evil-surround-mode 1))

     ;;; evil-replace-with-register
;; allows replacing from the register
(use-package evil-replace-with-register
  :ensure t
  :init (progn
	  ;; change default key bindings (if you want) HERE
	  (setq evil-replace-with-register-key (kbd "gr"))
	  (evil-replace-with-register-install)
	  )
  )

(use-package evil-org
  :ensure t
  :after org
  :config
  (add-hook 'org-mode-hook 'evil-org-mode)
  (add-hook 'evil-org-mode-hook
	    (lambda ()
	      (evil-org-set-key-theme))))

;; (define-key evil-normal-state-map (kbd "C-h") 'evil-window-left)
;; (define-key evil-normal-state-map (kbd "C-j") 'evil-window-down)
;; (define-key evil-normal-state-map (kbd "C-k") 'evil-window-up)
;; (define-key evil-normal-state-map (kbd "C-l") 'evil-window-right)
#+END_SRC

* which
brings up some help
#+BEGIN_SRC emacs-lisp

    ;;; which key describes keys after your press them
  (use-package which-key
    :ensure t
    :config (progn
	      (which-key-mode)
	      )
    )
#+END_SRC

#+RESULTS:
: t

* try
#+BEGIN_SRC emacs-lisp
;;; try
(use-package try
  :ensure t
  )
#+END_SRC
* ido
#+BEGIN_SRC emacs-lisp
  ;;; ido
  (setq ido-enable-flex-matching t)
  (setq ido-everywhere t)
  (ido-mode 1)
  ;;(defalias 'list-buffer 'ibuffer)
  (defalias 'list-buffer 'ibuffer-other-window)
#+END_SRC
* tabbar
#+BEGIN_SRC emacs-lisp
  ;; ;;; tabbar
  ;; (use-package tabbar
  ;;   :ensure t
  ;;   :config
  ;;   (tabbar-mode 1))
#+END_SRC
* window
#+BEGIN_SRC emacs-lisp
  ;;;; window navigation
  (winner-mode 1)
  (windmove-default-keybindings)

  ;;; ace window
  (use-package ace-window
    :ensure t
    :init
    (progn
      (global-set-key [remap other-window] 'ace-window)
      (custom-set-faces ;; adjust the size of the  number tags
       '(aw-leading-char-face
	 ((t (:inherit ace-jump-face-foreground :height 3.0)))))
      ))
#+END_SRC
* ivy, counsel & swiper
#+BEGIN_SRC emacs-lisp
  ;;; ivy
  (use-package ivy
    :ensure t
    :diminish (ivy-mode)
    :bind (("C-x b" . ivy-switch-buffer))
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-display-style 'fancy))

  ;;; counsel
  (use-package counsel
    :ensure t
    :bind
    (("M-y" . counsel-yank-pop)
     :map ivy-minibuffer-map
     ("M-y" . ivy-next-line)) 
    )

  ;;; swiper
  (use-package swiper
    :ensure t
    :config
    (progn
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (global-set-key (kbd "C-c C-r") 'ivy-resume)
      (global-set-key (kbd "<f6>") 'ivy-resume)
      (global-set-key (kbd "M-x") 'counsel-M-x)
      (global-set-key (kbd "C-x C-f") 'counsel-find-file)
      (global-set-key (kbd "<f1> f") 'counsel-describe-function)
      (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
      (global-set-key (kbd "<f1> l") 'counsel-load-library)
      (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
      (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
      (global-set-key (kbd "C-c g") 'counsel-git)
      (global-set-key (kbd "C-c j") 'counsel-git-grep)
      (global-set-key (kbd "C-c k") 'counsel-ag)
      (global-set-key (kbd "C-x l") 'counsel-locate)
      (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
      (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
      ))
#+END_SRC

#+RESULTS:
: t

* avy
#+BEGIN_SRC emacs-lisp
  ;;; avy
  (use-package avy
    :ensure t
    :commands (avy-goto-word-1)
    :bind (("M-s" . avy-goto-char)
	  ;;("C-'" . avy-goto-char-2)
	   ;;("M-g f" . avy-goto-line)
	   ;;("M-g w" . avy-goto-word-1)
	   ;;("M-g e" . avy-goto-word-0)
	   ))


#+END_SRC
* auto complete & company
#+BEGIN_SRC emacs-lisp
  ;;; auto complete
  (use-package auto-complete
    :ensure t
    :init
    (progn
      (ac-config-default)
      (global-auto-complete-mode t)
      ))


;;; company
  ;;(use-package company
  ;;  :ensure t
  ;;  :init
  ;;  (progn
  ;;    (global-company-mode t)
  ;;    ))
  ;;;; auto completion packages


#+END_SRC
* themes
#+BEGIN_SRC emacs-lisp
      ;;;; themes

      ;;; color-theme
  (use-package color-theme
    :ensure t
    )

      ;;; solarized
  (use-package solarized
    :ensure solarized-theme
    :config (progn
              (setq solarized-scale-org-headlines nil)
              )
    )

      ;;; monokai
  (use-package monokai-theme
    :ensure t
    :config ;;(load-theme 'monokai t)
    )

      ;;; sanityinc-tomorrow
  (use-package color-theme-sanityinc-tomorrow
    :ensure t
    :config ;;(load-theme 'sanityinc-tomorrow-night t)
    )

  (use-package leuven-theme
    :ensure t
    :config (
             ;; (setq leuven-scale-outline-headlines nil)
             ;; (setq leuven-scale-org-agenda-structure nil))
             )

  (use-package gruvbox-theme
  :ensure t
  )

    ;;; theme options
  (load-theme 'zenburn t)
#+END_SRC

#+RESULTS:
: t

* htmlize
#+BEGIN_SRC emacs-lisp
;;;; htmlize  
(use-package htmlize
  :ensure t
  )
#+END_SRC

#+RESULTS:

* reveal.js

#+BEGIN_SRC emacs-lisp
(use-package ox-reveal
  :ensure ox-reveal
  )

(setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
(setq org-reveal-mathjax t)

#+END_SRC

#+RESULTS:
: t
* flycheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :init
  (global-flycheck-mode t)
  )

#+END_SRC
* python
#+BEGIN_SRC emacs-lisp
  ;;;; python

  ;;; jedi
(use-package jedi
  :ensure t
  :init
  (add-hook 'python-mode-hook 'jedi:setup)
  (add-hook 'python-mode-hook 'jedi:ac-setup)
  )

  ;;; elpy
(use-package elpy
  :ensure t
  :config
  (elpy-enable)
  )
#+END_SRC

#+RESULTS:
: t
* yasnippet
#+BEGIN_SRC emacs-lisp
  ;;; yasnippet
(use-package yasnippet
  :ensure t
  :init
  (yas-global-mode 1)
  )
#+END_SRC

* undo tree
#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :ensure t
  :init
  (progn (global-undo-tree-mode t)
	 )
  )
#+END_SRC

#+RESULTS:
* misc
#+BEGIN_SRC emacs-lisp
(global-hl-line-mode t)

	  ;;; beacon
;; highlights the cursor when scrolling
(use-package beacon
  :ensure t
  :config (progn
	    (beacon-mode 1)
	    ;;(setq beacon-color "#666600")
	    )
  )
  
	  ;;; hungry delete
;; deletes all the whitespace between text
(use-package hungry-delete
  :ensure t
  :config (progn
	    (global-hungry-delete-mode)
	    )
  )

	  ;;; aggresive indent
(use-package aggressive-indent
  :ensure t
  :config (progn
	    (global-aggressive-indent-mode 1)
	    )
  )

	  ;;; expand region
(use-package expand-region
  :ensure t
  :config (progn
	    (global-set-key (kbd "C-=") 'er/expand-region)
	    (global-set-key (kbd "C--") 'er/contract-region)
	    )
  )

;; saves the clipboard from other programs and combines them with emacs
(setq save-interprogram-paste-before-kill t) 

;; auto-reverting options
(global-auto-revert-mode 1) ; automatically revert the buffer if your lazy about loading changed  buffers
(setq auto-revert-verbose nil) ; don't display any messages when doing so
(global-set-key (kbd "<f5>") 'revert-buffer)


#+END_SRC
* iedit, multiple cursors, narrowing
#+BEGIN_SRC emacs-lisp

	  ;;; iedit
  (use-package iedit
    :ensure t
    )

      ;;; multiple cursors
  ;; multiple cursors let's you add more cursors
  (use-package multiple-cursors
    :ensure t
    :config (progn
	      (global-set-key (kbd "C-c m c") 'mc/edit-lines)
	      (global-set-key (kbd "C->") 'mc/mark-next-like-this)
	      (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
	      ;;(global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
	      )
    )

  ;;; changes keybinds from regular narrowing keybinds to just c-x n to narrow
  ;;; and widen
  (defun narrow-or-widen-dwim (p)
    "widen if buffer is narrowed, narrow-dwim otherwise.
   dwim means: region, org-src-block, org-subtree, or
   defun, whichever applies first. narrowing to
   org-src-block actually calls `org-edit-src-code'.
   with prefix p, don't widen, just narrow even if buffer
   is already narrowed."
    (interactive "p")
    (declare (interactive-only))
    (cond ((and (buffer-narrowed-p) (not p)) (widen))
	  ((region-active-p)
	   (narrow-to-region (region-beginning)
			     (region-end)))
	  ((derived-mode-p 'org-mode)
	   ;; `org-edit-src-code' is not a real narrowing
	   ;; command. remove this first conditional if
	   ;; you don't want it.
	   (cond ((ignore-errors (org-edit-src-code) t)
		  (delete-other-windows))
		 ((ignore-errors (org-narrow-to-block) t))
		 (t (org-narrow-to-subtree))))
	  ((derived-mode-p 'latex-mode)
	   (latex-narrow-to-environment))
	  (t (narrow-to-defun))))
	  
  (define-key endless/toggle-map "n"
    #'narrow-or-widen-dwim)
  ;; This line actually replaces Emacs' entire narrowing
  ;; keymap, that's how much I like this command. Only
  ;; copy it if that's what you want.
  (define-key ctl-x-map "n" #'narrow-or-widen-dwim)
  (add-hook 'LaTeX-mode-hook
	    (lambda ()
	      (define-key LaTeX-mode-map "\C-xn"
		nil))
#+END_SRC
* web mode
#+BEGIN_SRC emacs-lisp
	    (use-package web-mode
	      :ensure t
	    :config
	    (add-to-list 'auto-mode-alist '("\\.html?\\" . web-mode))
	    (setq web-mode-engines-alist
		  '(("django" . "\\.html\\'")))
	    (setq web-mode-ac-sources-alist
		  '(("css" . (ac-source-css-property))
		    ("html" . (ac-source-words-in-buffer ac-source-abbrev))))
	    (setq web-mode-enable-auto-closing t)
	    (setq web-mode-enable-auto-quoting t)
	    )

#+END_SRC

#+RESULTS:
: t
* microsoft windows
#+BEGIN_SRC emacs-lisp
;; make PC keyboard's Win key or other to type Super or Hyper, for emacs running on Windows.
(setq w32-pass-lwindow-to-system nil)
(setq w32-lwindow-modifier 'super) ; Left Windows key

(setq w32-pass-rwindow-to-system nil)
(setq w32-rwindow-modifier 'super) ; Right Windows key

(setq w32-pass-apps-to-system nil)
(setq w32-apps-modifier 'hyper) ; Menu/App key

#+END_SRC
